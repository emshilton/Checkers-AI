//Appendix B: Source Code

#pragma config(Sensor, S2,     ,               sensorEV3_Touch)
#pragma config(Sensor, S3,     ,               sensorColorNxtFULL)
#pragma config(Sensor, S4,     ,               sensorEV3_Color)
//*!!Code automatically generated by 'ROBOTC' configuration wizard  !!*//

const byte ADJX = 67; // This is what the X motor needs to change by to move a
//distance of 1 square
const byte ADJY = 100; // This is what the Y motor needs to change by to move a
//distance of 1 square

typedef struct // Creates a struct called "move" which contains the data 
//neccesary for the robot to make 1 complete move
{
	byte startPlace; // Start location of the piece being moved
	byte endPlace; // End location of the piece being moved
	byte captures[12];
	// Locations of all (if any) enemy pieces which must be removed
	bool promote; // Does the piece being moved become a queen this turn?
	bool doesCapture;
	// Does this move result in at least 1 enemy piece being captured?
	short plusScore; // What score does this move achieve?

	byte tempStart; // Values used to carry data of a potential move up through
	// a recursive function
	byte tempCaptures[12];
	bool tempPromote;
} Move;

void menuScreens();
void resetRobot();
void setupPhantoms(byte * board);
void scanBoard(byte*boardConfiguration);
void claw(bool & hasPiece);
void clawOpen();
void clawClose();
void moveDelta(byte deltaX, byte deltaY);
void moveTo(byte & currentX, byte & currentY, byte finalX, byte finalY);
void removeOpponentPiece(byte & currentX, byte & currentY, bool hasPiece);
void backToSquareOneClaw(byte & currentX, byte & currentY);
bool canJumpInDir(byte * board, byte dir, byte tokenLoc);
byte getXsquares(byte square);
byte getYsquares(byte square);
bool isOnBoard(byte location);
short calcBoardScore(byte* board);
void findOptimalMove(byte * board, Move bestMove);

void queenPiece(byte & currentX, byte & currentY, byte & inventory, 
bool & hasPiece, byte targetX, byte targetY);

void additionalJump(byte * board, Move bestMove, byte tokenLoc, 
byte dreamLayer);



task songSunshine() // Plays music (William C)
{
	nSchedulePriority = 10; // Low priority, so task main takes precedence
	while (true)
	{
		playTone(  880,   27); wait1Msec( 300);
		playTone(  880,   27); wait1Msec( 300);
		playTone(  988,   27); wait1Msec( 300);
		playTone( 1109,   54); wait1Msec( 600);
		playTone( 1109,  108); wait1Msec(1200);
		playTone( 1109,   27); wait1Msec( 300);
		playTone( 1047,   27); wait1Msec( 300);
		playTone( 1109,   27); wait1Msec( 300);
		playTone(  880,   54); wait1Msec( 600);
		playTone(  880,  108); wait1Msec(1200);
		playTone(  880,   27); wait1Msec( 300);
		playTone(  988,   27); wait1Msec( 300);
		playTone( 1109,   27); wait1Msec( 300);
		playTone( 1175,   54); wait1Msec( 600);
		playTone( 1481,  108); wait1Msec(1200);
		playTone( 1481,   27); wait1Msec( 300);
		playTone( 1320,   27); wait1Msec( 300);
		playTone( 1175,   27); wait1Msec( 300);
		playTone( 1109,  108); wait1Msec(1200);
		playTone(  880,   27); wait1Msec( 300);
		playTone(  988,   27); wait1Msec( 300);
		playTone( 1109,   27); wait1Msec( 300);
		playTone( 1175,   54); wait1Msec( 600);
		playTone( 1481,  108); wait1Msec(1200);
		playTone( 1481,   27); wait1Msec( 300);
		playTone( 1320,   27); wait1Msec( 300);
		playTone( 1175,   27); wait1Msec( 300);
		playTone( 1109,   54); wait1Msec( 600);
		playTone(  880,  108); wait1Msec(1200);
		playTone(  880,   27); wait1Msec( 300);
		playTone(  988,   27); wait1Msec( 300);
		playTone( 1109,   54); wait1Msec( 600);
		playTone( 1175,   27); wait1Msec( 300);
		playTone(  988,   54); wait1Msec( 600);
		playTone(  988,   27); wait1Msec( 300);
		playTone( 1109,   14); wait1Msec( 150);
		playTone(  880,  108); wait1Msec(1200);
	}
}

void queenPiece(byte & currentX, byte & currentY, byte & inventory, 
bool & hasPiece, byte targetX, byte targetY)
//(Will T)
// Removes a freindly piece, and replacces it with a queen
{
	claw(hasPiece);
	moveTo(currentX, currentY, 9, 4);
	claw(hasPiece);
	resetRobot();
	backToSquareOneClaw(currentX, currentY);
	moveTo(currentX, currentY, -1 + (inventory%2), inventory);
	claw(hasPiece);
	moveTo(currentX, currentY, targetX, targetY);
	claw(hasPiece);
	currentX = targetX;
	currentY = targetY;
	inventory--;
}



void resetRobot() // Moves the robot back to the "reset" position, and 
// resets the X and Y encoders.
//(Will T)
{
	motor[motorA] = 0;
	motor[motorB] = 0;
	wait1Msec(250);
	motor[motorA] = -15;
	motor[motorB] = -12;
	while(SensorValue[S2]!=1 || SensorValue[S4] != 5) 
	// Moves until the touch sensor is pressed and the colour sensor sees red
	{
		if(SensorValue[S2] == 1)
			motor[motorB]=0;
		if(getColorName(S4) == 5)
			motor[motorA]=0;
	}

	motor[motorA] = 0;
	motor[motorB] = 0;
    nMotorEncoder[motorA] = 0;
    nMotorEncoder[motorB] = 0;
}

void backToSquareOneClaw(byte & currentX, byte & currentY) 
// Moves claw to furthest back left square from reset position
{
	currentX = 1;
	currentY = 1;
	motor[motorA] = 15;

	while(nMotorEncoder[motorA] < 2.8 * ADJX)
	{}

	motor[motorA] = 0;
}

void menuScreens() // Start of game interface (William C)
{
	while (true)
	{
		while(!getButtonPress(buttonEnter))
		{
			displayCenteredTextLine(3, "SHALL WE PLAY A GAME?");
			displayCenteredTextLine(7, "YES");
			displayBigStringAt(65, 76,">");

			wait1Msec(50);
			eraseDisplay();
		}

		wait1Msec(200);
		bool pointPos = true;

		while(!getButtonPress(buttonEnter))
		{

			displayCenteredTextLine(2, "PLEASE CHOOSE GAME");
			displayCenteredTextLine(6, "CHECKERS");
			displayCenteredTextLine(9, "GLOBAL THERMONUCLEAR WAR");

			if (getButtonPress(buttonDown)) 
			// Allow player to control cursor and choose option
				pointPos = false;
			if (getButtonPress(buttonUp))
				pointPos = true;

			if (pointPos)
				displayBigStringAt(52, 84,">");
			else
				displayBigStringAt(2, 60,">");

			wait10Msec(5);

			eraseDisplay();
		}

		if (pointPos == true)
			return; // Start the game

		for (byte t = 0; t<100; t+=10)
		{
			displayBigStringAt(t-10, 70, "...");
			displayCenteredTextLine(5, "THINKING");
			wait1Msec(500);
			eraseDisplay();
		}

		while(!getButtonPress(buttonEnter))
		{
			displayCenteredTextLine(3, "AN INTERESTING GAME. THE ONLY");
			displayCenteredTextLine(4, "WINNING MOVE IS NOT TO PLAY.");
			displayCenteredTextLine(6, "HOW ABOUT A NICE GAME OF");
			displayCenteredTextLine(7, "CHECKERS?");
			displayCenteredTextLine(11, "RETURN");
			displayBigStringAt(55, 44,">");

			wait10Msec(5);

			eraseDisplay();
		}

		wait10Msec(20);
	}
}


bool isOnBoard(byte location) //(William C)
// Checks if a certain square in the board array is on the playing board
{
	return !(location % 11 == 1 || location % 11 == 6 ||  location % 11 == 7) 
	&& location > 12 &&  location < 56;
}


void setupPhantoms(byte* board) //(William C)
{
	for (byte i = 1; i<=66; i++) 
	// Fill squares not on playing board with piece of type 5 (a "phantom")
	{
		if (!isOnBoard(i))
			board[i] = 5;
	}
}

void scanBoard(byte*boardConfiguration) 
//(Will T & Emily S)
// Scans entire board to find what pieces are where.
{
	nMotorEncoder[motorA] = 0;
	motor[motorA] = 15;

  while(nMotorEncoder[motorA] < 5.2*ADJX);
   // Moves sensor (not claw) to the furthest back left square

	motor[motorA] = 0;
	wait1Msec(100);

	byte positionInArray = 2, n = 1, m = 1;

	for(byte i=1; i <= 16; i++)
	{
		if(i<=4 || (i>=9 && i<=12))// Scanning for columns 1, 2, 5, and 6
		{
			positionInArray+=11;
			boardConfiguration[positionInArray]= SensorRaw(S4);
			boardConfiguration[positionInArray+6] = SensorRaw(S3);

		}
		else // Scanning for columns 3, 4, 7, and 8
		{
			positionInArray-=11;
			boardConfiguration[positionInArray]= SensorRaw(S4);
			boardConfiguration[positionInArray+6]=SensorRaw(S3);

		}

		if(i<4 || (i>=9 && i<12))//Moves up columns 1, 2, 5, and 6 for scanning
		{
			moveTo(n, m, n+2, m);
			wait1Msec(100);
		}
		else if ((i>=5 && i<8)||(i>=13 && i<16)) 
		// Moves down columns 3, 4, 7, and 8 for scanning
		{
			moveTo(n, m, n-2, m);
			wait1Msec(100);
		}


		if (i%4==0 && i!=16)// Moves to next set of columns
		{
			moveTo(n, m, n, m+2);
			wait1Msec(100);
			m+=2;
			if (i == 4 || i == 12)
				positionInArray+=12;
			if (i == 8)
				positionInArray-=10;
		}

		if(i==16)// Moves robot back to intial position
			resetRobot();
	}
	for (int i = 13; i < 56; i++) // Change color values to values of pieces
	{
		if (boardConfiguration[i] == 1)
			boardConfiguration[i] = 0;
		else if (boardConfiguration[i] == 2)
			boardConfiguration[i] = 3;
		else if (boardConfiguration[i] == 3)
			boardConfiguration[i] = 4;
		else if (boardConfiguration[i] == 6)
			boardConfiguration[i] = 1;
		else if (boardConfiguration[i] == 4)
			boardConfiguration[i] = 2;
	}

}

void clawOpen() // Opens the claw
//(Will T)
{
	nMotorEncoder[motorD] = 0;
	motor[motorD] = -100;

	while(nMotorEncoder[motorD] > -800)
	{}

	motor[motorD] = 0;
}

void clawClose() // Closes the claw
//(Will T)
{
	nMotorEncoder[motorD] = 0;
	motor[motorD] = 100;

	while(nMotorEncoder[motorD] < 800)
	{}

	motor[motorD] = 0;
}


void claw(bool & hasPiece) // Either picks up or puts down a piece
//(Aaron R)
{
	nMotorEncoder[motorC] = 0;
	motor[motorC] = 10;
    while(nMotorEncoder[motorC] < 180); // Lower arm
	motor[motorC] = 0;

	nMotorEncoder[motorD] = 0;
	if(hasPiece)
	{
		clawOpen();
		hasPiece = false;
	}
	else
	{
		clawClose();
		hasPiece = true;
	}

	motor[motorC] = 10;
    while(nMotorEncoder[motorC] < 360); // Raise arm
	motor[motorC] = 0;
}


void moveDelta(byte deltaX, byte deltaY) 
// Move robot by a specified number of squares in the X and Y directions
//(Aaron R)
{
	short rotationX = abs(deltaX * ADJX);
	short rotationY = abs(deltaY * ADJY);

	nMotorEncoder[motorA] = 0;
	nMotorEncoder[motorB] = 0;

	if (deltaX > 0)
		motor[motorA] = 20;
	else
		motor[motorA] = -20;

	if (deltaY > 0)
		motor[motorB] = 20;
	else
		motor[motorB] = -20;

	while(abs(nMotorEncoder[motorA]) < rotationX  || abs(nMotorEncoder[motorB])
	 < rotationY)
	{
		if (nMotorEncoder[motorA] > rotationX || nMotorEncoder[motorA] 
		< -rotationX)
			motor[motorA] = 0;
		if (nMotorEncoder[motorB] > rotationY || nMotorEncoder[motorB] 
		< -rotationY)
			motor[motorB] = 0;
	}
	motor[motorA] = 0;
	motor[motorB] = 0;
}

void moveTo(byte & currentX, byte & currentY, byte finalX, byte finalY)
//(Aaron R)
// Move claw of robot over a specified square
{
	byte deltaX;
	byte deltaY;

	deltaX = finalX - currentX;
	deltaY = finalY - currentY;

	currentX = finalX;
	currentY = finalY;

	moveDelta(deltaX, deltaY);
}

void removeOpponentPiece(byte & currentX, byte & currentY, bool hasPiece)
//(Will T) 
// Removes captured piece
{
	claw(hasPiece);
	moveTo(currentX, currentY, 9,4);
	claw(hasPiece);

	currentX = 9;
	currentY = 4;
}

byte getXsquares(byte square) // Finds which row a piece is in
//(Emily S)
{
	if (square%11 <= 6 && square%11!=0)
		return 2*(square/11) -1;
	else
		return 2*((square-1)/11);
}

byte getYsquares(byte square) // Finds which column a piece is in
//(Emily S)
{
	if ((square%11) <= 6 && square%11 !=0)
		return 2*(square%11) -3;
	else
		return 2*((square-7)%11) ;
}


void findOptimalMove(byte * board, Move bestMove) // Find the best move to make
//(William C)
{
	for (byte i = 13; i <= 55; i++) // Check every square on board
	{
		if ((board[i] == 3 )|| (board[i] == 4)) // If there is a friendly piece
		{
			for (byte dir = 1; dir <= 4; dir++)
			// Check each direction. 1 = Forward/Left, 2 = Forward/Right, 
			// 3 = Backward/Right, 4 = Backward/Left
			{
				bestMove.tempCaptures[0] = 0;

				byte dirValue; // The number you need to add to a square to get
				// to the next square in a certain direction
				if (dir == 1)
					dirValue = 5;
				if (dir == 2)
					dirValue = 6;
				if (dir == 3)
					dirValue = -5;
				if (dir == 4)
					dirValue = -6;

				if ((board[i + dirValue] == 0) && ((board[i] == 4) ||
				(dir <= 2))) // Check if a non-capture move is possible
				{
					byte copyOfBoard[67]; // Create a temporary copy of board

					for (byte t = 1; t <= 66; t++)
					{
						copyOfBoard[t] = board[t]; // Duplicate board to copy
					}

					if ((i+dirValue) > 51 && board[i] == 3)
					// Promote piece if neccesary on copy
					{
						copyOfBoard[i+dirValue] = 4;
						bestMove.tempPromote = true;
					}
					else
						copyOfBoard[i+dirValue] = board[i];

					copyOfBoard[i] = 0; // Erase moved piece from new board

					short thisMoveScore = calcBoardScore(copyOfBoard);

					if ((thisMoveScore > bestMove.plusScore) && 
					(bestMove.doesCapture == false)) 
					// If this move is the best one found
					{
						bestMove.startPlace = i;
						//Put the details of this move into bestMove
						bestMove.endPlace = i + dirValue;
						bestMove.plusScore = thisMoveScore;
						bestMove.promote = bestMove.tempPromote;

					}

				}


				if (((board[i+dirValue] == 1) || (board[i+dirValue] == 2)) 
				&& (board[i+(2*dirValue)]  == 0) && ((board[i] == 4) || 
				(dir <= 2))) // Check if a capture move is possible
				{
					byte copyOfBoard[67]; // Create a temporary copy of board

					for (byte t = 1; t <= 66; t++)
					{
						copyOfBoard[t] = board[t]; // Duplicate board to copy
					}

					copyOfBoard[i] = copyOfBoard[i + dirValue] = 0;

					if ((i+(2*dirValue)) > 51) 
					// Promote piece if neccesary on copy
					{
						copyOfBoard[i+(2*dirValue)] = 4;
						bestMove.tempPromote = true;
					}
					else
					{
						copyOfBoard[i+(2*dirValue)] = board[i];
						bestMove.tempPromote = false;
					}

					bestMove.tempStart = i;
					bestMove.tempCaptures[0] = (i+dirValue);

					additionalJump(copyOfBoard, bestMove, (i+(2*dirValue)), 1);
					// Call recursive function


				}
				bestMove.tempPromote = false;
			}
		}
	}
}

void additionalJump(byte * board, Move bestMove, byte tokenLoc, byte dreamLayer)
// Recursive function that finds double (or more) jumps
//(William C)
{
	bool canJumpAnywhere = false;

	for (byte dir = 1; dir <= 4; dir++)
	// Check if an additional jump is possible after the last one
	{
		if (canJumpInDir(board, dir, tokenLoc))
			canJumpAnywhere = true;
	}

	if (!(canJumpAnywhere))
	// Stopping condition. If there are no more jumps, end.
	{
		short thisMoveScore = calcBoardScore(board);
		if (!(bestMove.doesCapture) || (thisMoveScore > bestMove.plusScore))
		// If this move is the best yet
		{
			bestMove.startPlace = bestMove.tempStart;
			// Copy details of this move to bestMove
			bestMove.endPlace = tokenLoc;
			bestMove.doesCapture = true;
			bestMove.plusScore = thisMoveScore;
			bestMove.promote = bestMove.tempPromote;
			for (byte i = 0; i < 12; i++)
			{
				bestMove.captures[i] = bestMove.tempCaptures[i];
			}
		}
		return;
	}

	else // If another jump is possible
	{
		for (byte dir = 1; dir <= 4; dir++) // Check each direction
		{
			if (board[tokenLoc] == 3)
				bestMove.tempPromote = false;

			for (byte j = dreamLayer; j < 12; j++)
			// Remove all captures from longer, previously checked
			// chains of jumps
				bestMove.tempCaptures[j] = 0;

			byte dirValue;

			if (dir == 1)
				dirValue = 5;
			if (dir == 2)
				dirValue = 6;
			if (dir == 3)
				dirValue = -5;
			if (dir == 4)
				dirValue = -6;

			if ((board[tokenLoc+dirValue] == 1 || board[tokenLoc+dirValue] == 2)
			&& (board[tokenLoc+(2*dirValue)] == 0) && ((board[tokenLoc] == 4)
			|| (dir <= 2)))
			{
				byte copyOfBoard[67]; // Create a temporary copy of board

				for (byte t = 1; t <= 66; t++)
				{
					copyOfBoard[t] = board[t]; // Duplicate board to copy
				}

				copyOfBoard[tokenLoc] = copyOfBoard[tokenLoc + dirValue] = 0;

				if ((tokenLoc+(2*dirValue)) > 51  && board[tokenLoc] == 3)
				// Promote if neccesary on copy
				{
					copyOfBoard[tokenLoc+(2*dirValue)] = 4;
					bestMove.tempPromote = true;
				}
				else
					copyOfBoard[tokenLoc+(2*dirValue)] = board[tokenLoc];

				bestMove.tempCaptures[dreamLayer] = (tokenLoc+dirValue);

				additionalJump(copyOfBoard, bestMove, tokenLoc+(2*dirValue),
				dreamLayer + 1); // Call this recursive function again
			}
		}
	}
}


bool canJumpInDir(byte * board, byte dir, byte tokenLoc)
//(William C)
// Checks if a certain piece is able to capture an enemy piece in a 
// certain direction
{
	byte dirValue;

	if (dir == 1)
		dirValue = 5;
	if (dir == 2)
		dirValue = 6;
	if (dir == 3)
		dirValue = -5;
	if (dir == 4)
		dirValue = -6;

	if ((board[tokenLoc + 2 * dirValue] == 0) && 
	((board[tokenLoc+dirValue] == 1) || (board[tokenLoc+dirValue] == 2)) &&
	((board[tokenLoc] == 4) || (dir <= 2))) // Check for capture
	{
		return true;
	}
	return false;
}


short calcBoardScore(byte * board)
//(William C)
// Reads in a board layout, and assigns a score to it based on how "good" it is
//for the computer
{
	short runningScore = 0;

	for(byte i=56; i>=13; i--)
	{
		if(board[i]==1) // The presence of enemy pieces is bad
			runningScore -= 100;
		if(board[i]==2) // The presence of enemy queens is worse
			runningScore -= 110;
        if(board[i]==4) // The presence of friendly queens is good
            runningScore += 1;
	}
	return runningScore;
}



task main() //(William C & Emily S)
{
	nSchedulePriority = 100; // Highest priority task
	bool GameOn = true;

	SensorType[S2] = sensorEV3_Touch;
	SensorType[S4] = sensorEV3_Color;
	SensorType[S3] = sensorColorNxtFULL;

	resetRobot();

    startTask(songSunshine); // Start music

	wait1Msec(250);

	while (!getButtonPress(buttonBack)) // Continues until program is exited
	{
		GameOn = true;

		menuScreens();

		stopTask(songSunshine); // Stop song when game starts

		time1[T1] = 0;

        eraseDisplay();

        displayCenteredTextLine(4, "IT'S YOUR TURN. MAKE A");
        displayCenteredTextLine(5, "MOVE, AND PRESS THE CENTER");
        displayCenteredTextLine(6, "BUTTON WHEN YOU'RE DONE.");
        displayCenteredTextLine(7, "ENJOY THE MUSIC.");

		while(getButtonPress(buttonEnter)){}
		while(!getButtonPress(buttonEnter)){}
        eraseDisplay();

		while (GameOn) // This while loop describes a single turn
		{
			byte board[67]; // create gameboard array
			for(int i = 0; i < 67; i++)
				board[i] = 0;

			byte currentX;
			byte currentY;

			bool hasPiece = false;

			clawOpen(); //Sets claw to open position, to prevent any chance of
			//it pulling itself apart

			byte inventory = 6; // Establishes how many queens are left in
			//storage

			resetRobot();

			scanBoard(board);
			setupPhantoms(board);

			byte computerPieceCount = 0;
			byte playerPieceCount = 0;

			for (byte i = 1; i <= 66; i++) //Check Game is Not Over
			{
					if ( board[i] == 3 || board[i] == 4)
						computerPieceCount++;
					if ( board[i] == 1 || board[i] == 2)
						playerPieceCount++;
			}

			for (int i = 1; i<=6; i++) // Display entire gameboard on screen
			{
				for (int t = 1; t<=11; t++)
				{
					if ((t%11 > 6) || (t%11 < 1))
						displayStringAt(((t - 6) * 12 + 6)*2, (i * 16) + 16,
						"%d", board[((i-1)*11+t)]);
					else
						displayStringAt(((t * 12)*2), (i * 16) + 8, "%d", 
						board[((i-1)*11+t)]);
				}
			}

			if (playerPieceCount == 0 || computerPieceCount == 0)
			// End game if it is over
				GameOn = false;
			else
			{

				Move bestMove; // Create and initialize instance of struct

				bestMove.startPlace = 0;
				bestMove.endPlace = 0;
				bestMove.plusScore = -10000;
				bestMove.promote = false;
				bestMove.doesCapture = false;
				bestMove.tempStart = 0;
				bestMove.tempPromote = false;
				for (int i = 0; i < 12; i++)
				{
					bestMove.captures[i] = 0;
					bestMove.tempCaptures[i] = 0;
				}

				findOptimalMove(board, bestMove);

				backToSquareOneClaw(currentX, currentY);

				hasPiece = false;

				for (byte capt = 0; capt < 12; capt++)
				// Remove all captured pieces
				{
					if ((bestMove.captures[capt] != 0))
					{
						moveTo(currentX, currentY, getXsquares(bestMove
						.captures[capt]), getYsquares(bestMove.captures[capt]));
						removeOpponentPiece(currentX, currentY, hasPiece);
					}
				}

				if (bestMove.promote) // Promote piece if neccesary
				{
					moveTo(currentX, currentY, getXsquares(bestMove.startPlace),
					getYsquares(bestMove.startPlace));
					queenPiece(currentX, currentY, inventory, hasPiece,
					getXsquares(bestMove.endPlace),
					getYsquares(bestMove.endPlace));

				}
				else // Move piece
				{
					moveTo(currentX, currentY, getXsquares(bestMove.startPlace),
					getYsquares(bestMove.startPlace));
					claw(hasPiece);
					moveTo(currentX, currentY, getXsquares(bestMove.endPlace), 
					getYsquares(bestMove.endPlace));
					claw(hasPiece);
				}

                resetRobot();
                clawClose();

                eraseDisplay();
                displayCenteredTextLine(2, "HA! TAKE THAT!");
                displayCenteredTextLine(4, "IT'S YOUR TURN NOW. MAKE A");
                displayCenteredTextLine(5, "MOVE, AND PRESS THE CENTER");
                displayCenteredTextLine(6, "BUTTON WHEN YOU'RE DONE.");
                displayCenteredTextLine(7, "ENJOY THE MUSIC.");

                startTask(songSunshine);

                while (!getButtonPress(buttonEnter) &&
				!getButtonPress(buttonDown))
                    wait1Msec(200);

                if (getButtonPress(buttonDown))
                    GameOn = false;

                stopTask(songSunshine);
            }

            eraseDisplay();
		}

		resetRobot();
        startTask(songSunshine);
        displayCenteredTextLine(3, "Game Over");
        displayCenteredTextLine(5, "This game took %d seconds", time1[T1]/1000);
        displayCenteredTextLine(7, "PRESS MAIN BUTTON TO RESET.");
        while (!getButtonPress(buttonEnter));
        wait1Msec(500);
	}
}
